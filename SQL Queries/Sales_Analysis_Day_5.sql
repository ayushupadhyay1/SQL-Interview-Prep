use sales_analysis;

-- Query-1) Find the second highest total revenue generated by a sales representative.Use subquery, CTE, or DENSE_RANK().
with second_highest_revenue as 
(
select 
	s.sales_rep_id,
    sr.rep_name,
    sum(s.quantity * p.price_per_unit) as total_revenue,
    dense_rank() over (order by sum(s.quantity * p.price_per_unit) desc) as rnk
from sales_Reps as sr
join sales as s
	on s.sales_rep_id = sr.sales_Rep_id
join products as p
	on p.product_id = s.product_id
group by s.sales_rep_id, sr.rep_name
)
select
	sales_rep_id,
    rep_name,
    total_revenue
from second_highest_revenue
where rnk = 2;


-- Query-2) Identify customers who never received any discount on any of their purchases.
select 
	s.customer_id,
    c.customer_name
from customers as c
join sales as s
	on c.customer_id = s.customer_id
group by s.customer_id, c.customer_name
having sum(s.discount_applied) = 0;

-- Query-3) Retrieve the top 3 performing products by total revenue.
select
	s.product_id,
    p.product_name,
    sum(s.quantity * p.price_per_unit) as total_revenue
from products as p
join sales as s
	on p.product_id = s.product_id
group by s.product_id, p.product_name
order by total_revenue desc
limit 3;

-- Query-4) Calculate month-over-month growth in total revenue using LAG().
with growth_rate as 
(
select
	month(s.sale_date) as Months,
    sum(s.quantity * p.price_per_unit) as total_revenue
from sales as s
join products as p
	on s.product_id = p.product_id
group by month(s.sale_date)
)
select
	Months,
    total_revenue,
    lag(total_revenue) over (order by Months) as previous_month_revenue,
    round((total_revenue - lag(total_revenue) over (order by Months)) / ( lag(total_revenue) over (order by Months)) * 100,2) as growth_Percentage
from growth_rate;
    
-- Query-5) List customers who made their first purchase in the last 30 days.
select
	s.customer_id,
    c.customer_name,
    min(s.sale_date) as first_purchase_date
from customers as c
join sales as s
	on c.customer_id = s.customer_id
group by s.customer_id, c.customer_name
having min(s.sale_date) >= current_date() - interval 30 day;

-- Query-6) Find sales reps who have not made any sales in the last 90 days.
select 
	sr.sales_rep_id,
    sr.rep_name
from sales_reps as sr
left join sales as s
	on s.sales_rep_id = sr.sales_rep_id
	and s.sale_date >= current_date() - interval 90 day
where s.sale_date is NULL;


-- Query-7) Identify products that have never been sold.
select	
	p.product_id
from products as p
left join sales as s
	on p.product_id = s.product_id
where s.product_id is NULL;


-- Query-8) Calculate average discount per region and compare it to the global average discount.
with regional_total_discount as
(
select
	sr.region,
    round(avg(s.discount_applied),2) as regional_discout
from sales_reps as sr
join sales as s
	on s.sales_rep_id = sr.sales_rep_id
group by sr.region
),
global_total_discount as
(
select
    round(avg(s.discount_applied),2) as global_discout
from sales_reps as sr
join sales as s
	on s.sales_rep_id = sr.sales_rep_id
)
select
	rd.region,
    rd.regional_discout,
    gd.global_discout
from regional_total_discount as rd
cross join global_total_discount as gd;


-- Query-9) For each region, rank reps by total revenue using RANK() or DENSE_RANK() with PARTITION BY.
select
	s.sales_rep_id,
    sr.rep_name,
	sr.region,
    sum(s.quantity * p.price_per_unit) as total_revenue,
    rank() over (partition by sr.region order by sum(s.quantity * p.price_per_unit) desc) as RNK
from sales_reps as sr
join sales as s
	on s.sales_rep_id = sr.sales_rep_id
join products as p
	on p.product_id = s.product_id
group by s.sales_rep_id, sr.rep_name, sr.region;

-- Query-10) Find reps who had a revenue-to-discount ratio greater than 10.
with revenue_to_discount as
(
select 
	s.sales_rep_id,
    sr.rep_name,
    sum(s.quantity * p.price_per_unit) as total_revenue,
    sum(s.discount_applied) as total_discout,
    round(sum(s.quantity * p.price_per_unit) / nullif(sum(s.discount_applied),0),2) as revenue_to_discount_ratio
from sales_reps as sr
join sales as s
	on s.sales_rep_id = sr.sales_rep_id
join products as p
	on p.product_id = s.product_id
group by s.sales_rep_id, sr.rep_name
)
select
	sales_rep_id,
    rep_name,
    revenue_to_discount_ratio
from revenue_to_discount
where revenue_to_discount_ratio > 10
order by revenue_to_discount_ratio desc;


-- Query-11) List months where the total revenue dropped compared to the previous month.
with revenue_comparision as
(
select	 
	month(s.sale_date) as Months,
    sum(s.quantity * p.price_per_unit) as total_revenue
from sales as s
join products as p
	on s.product_id = p.product_id
group by month(s.sale_date)
),
previous_month_rent as
(
select
	Months,
    total_revenue,
    lag(total_revenue) over (order by Months) as previous_month_revenue
from revenue_comparision
)
select *
from
(
select
	Months,
    total_revenue,
    previous_month_revenue,
    case
		when total_revenue < previous_month_revenue then 'Dropped'
        when total_revenue > previous_month_revenue then 'Increased'
        when total_revenue = previous_month_revenue then 'Same'
    end as revenue_comparision_status
from previous_month_rent
) as revenue_dropped
where revenue_comparision_status = 'Dropped';


-- Query-12) Find customers who purchased more than 3 different products.
select
	s.customer_id,
    c.customer_name,
    count(distinct s.product_id) as distinct_products
from customers as c
join sales as s
	on c.customer_id = s.customer_id
group by s.customer_id, c.customer_name
having count(distinct s.product_id) > 3;

-- Query-13) Return sales reps whose average deal size is greater than the company-wide average.
with deal_size_per_rep as
(
select
	s.sales_rep_id,
    sr.rep_name,
    round(avg(s.quantity * p.price_per_unit),2) as average_deal_size
from sales as s
join products as p
	on s.product_id = p.product_id
join sales_reps as sr
	on sr.sales_rep_id = s.sales_rep_id
group by s.sales_rep_id, sr.rep_name
),
deal_size_company as
(
select
	round(avg(s.quantity * p.price_per_unit),2) as companys_avg_deal_size
from sales as s
join products as p
	on s.product_id = p.product_id
)
select
	rep_deal.sales_rep_id,
    rep_deal.rep_name,
    rep_deal.average_deal_size
from deal_size_per_rep as rep_deal
cross join deal_size_company com_deal
where rep_deal.average_deal_size > com_deal.companys_avg_deal_size;


-- Query-14) Identify duplicate sales transactions if sale_id is not a unique identifier.
select * from customers;
select * from products;
select * from sales;
select * from sales_reps;

select
        customer_id,
        product_id,
        sales_rep_id,
        quantity,
        sale_date,
        discount_applied,
        count(*) as occurant_count
from sales
group by
        customer_id,
        product_id,
        sales_rep_id,
        quantity,
        sale_date,
        discount_applied
having count(*) > 1;

-- Query-15) For each product, find the first and latest sale date.
select
	s.product_id,
    p.product_name,
    min(s.sale_date) as first_sale_date,
    max(s.sale_date) as latest_sale_date
from sales as s
join products as p
	on p.product_id = s.product_id
group by s.product_id, p.product_name;