use Sales_and_Reporting_Analysis;
-- ============================================================= EASY ==========================================================================

-- Query-1) Get the list of all employees and their corresponding department names.
select 
	e.Full_name,
    d.department_name
from employees as e
join departments as d
	on e.department_Id = d.department_Id;


-- Query-2) Count how many employees are currently ‘Active’.
select
	count(employee_id) as employee_count
from employees
where status = 'Active';

-- Query-3) Find the total revenue generated by each employee.
select 	
	e.employee_id,
	e.Full_name,
    sum(s.revenue) as total_revenue
from employees as e
join sales as s
	on e.employee_Id = s.Employee_ID
group by e.employee_id, e.full_name
order by total_revenue desc;

-- Query-4) Show average monthly revenue for the ‘Vision Care’ product category.
select
	month(sale_date) as Months,
    round(avg(revenue),2) as average_revenue
from sales
where product_category = 'Vision Care'
group by Months
order by Months;

-- Query-5) List the departments that incurred costs in March 2023.
select 
	d.department_Id,
    d.department_Name,
    count(*) as incurred_costs
from departments as d
join costs as c
	on d.department_Id = c.department_Id
where month(cost_Date) = 3  and year(cost_date) = 2023
group by d.department_id, d.department_name;

-- ============================================================= MEDIUM ==========================================================================

-- Query-6) For each department, calculate total cost and total number of cost entries.
select 
	d.department_id,
    d.department_name,
    sum(c.cost_amount) as total_cost,
    count(c.cost_amount) as cost_entries
from departments as d
join costs as c
	on d.department_id = c.department_id
group by d.department_id, d.department_name
order by total_cost desc;

-- Query-7) Identify employees who made more than one sale.
select 
	e.employee_id,
    e.full_name,
    count(sale_id) as sales_count
from employees as e
join sales as s
	on e.employee_id = s.employee_id
group by e.employee_id, e.full_name
having count(sale_id) > 1
order by sales_count desc;

-- Query-8) Create a report showing monthly total revenue and total cost by department.
select 
    d.department_name,
    round(sum(s.revenue),0) as total_revenue,
    round(sum(c.cost_amount),0) as total_cost_amount,
    year(s.sale_date) as years,
    month(s.sale_date) as months
from departments as d
join employees as e
	on d.department_id = e.department_id
join sales as s
	on s.employee_id = e.employee_id
join costs as c
	on c.department_id = d.department_id
group by d.department_name, months, years
order by months;


WITH monthly_revenue AS (
    SELECT
        d.department_id,
        d.department_name,
        MONTH(s.sale_date) AS month,
        YEAR(s.sale_date) AS year,
        SUM(s.revenue) AS total_revenue
    FROM departments d
    JOIN employees e ON d.department_id = e.department_id
    JOIN sales s ON s.employee_id = e.employee_id
    GROUP BY d.department_id, d.department_name, YEAR(s.sale_date), MONTH(s.sale_date)
),

monthly_costs AS (
    SELECT
        c.department_id,
        MONTH(c.cost_date) AS month,
        YEAR(c.cost_date) AS year,
        SUM(c.cost_amount) AS total_cost
    FROM costs c
    GROUP BY c.department_id, YEAR(c.cost_date), MONTH(c.cost_date)
)

SELECT 
    mr.department_name,
    mr.year,
    mr.month,
    COALESCE(mr.total_revenue, 0) AS total_revenue,
    COALESCE(mc.total_cost, 0) AS total_cost
FROM monthly_revenue mr
LEFT JOIN monthly_costs mc
    ON mr.department_id = mc.department_id
    AND mr.year = mc.year
    AND mr.month = mc.month
ORDER BY mr.department_name, mr.year, mr.month;

-- Query-9) Get top 2 highest revenue-generating employees in 2023.
select 
	e.employee_id,
    e.full_name,
    sum(s.revenue) as total_revenue
from employees as e
join sales as s
	on e.employee_id = s.employee_id
where year(s.sale_date) = 2023
group by e.employee_id, e.full_name
order by total_revenue desc
limit 2;

-- Query-10) Find employees who haven’t made any sales.
select 
	e.employee_id,
    e.full_name
from employees as e
left join sales as s
	on e.employee_id = s.employee_id
where s.employee_id is NULL;

-- ============================================================= HARD ==========================================================================


-- Query-11) Using window functions, rank employees based on total revenue within their department.
with employee_revenue as
(
select 
	e.employee_id,
    e.full_name,
    d.department_id,
    d.department_name,
    sum(s.revenue) as total_revenue
from employees as e
join sales as s
	on e.employee_id = s.employee_id
join departments as d
	on d.department_id = e.department_id
group by e.employee_id, e.full_name, d.department_name, department_id
)
select	
	employee_id,
    full_name,
    department_name,
	total_revenue,
    row_number() over (partition by department_name order by total_revenue desc) as RNK
from employee_revenue;

-- Query-12) Identify departments where total costs exceeded $30,000 in 2023.

select 
	d.department_id,
    d.department_name,
    sum(c.cost_amount) as total_cost
from departments as d
join costs as c
	on d.department_id = c.department_id
where year(c.cost_date) = 2023
group by d.department_id, d.department_name
having sum(c.cost_amount) > 30000;


-- Query-13) Create a CTE that calculates revenue-to-cost ratio per department.
select * from costs;
select * from departments;
select * from employees;
select * from sales;

-- Query-14) Find cost types contributing more than 50% of total department cost.

-- Query-15) List employee names and their percentage contribution to total sales.




